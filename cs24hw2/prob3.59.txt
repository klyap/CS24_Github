int switch_prob(int x, int n){
	int result = x;

	switch(n){
		case 50:
			x = x << 2;
			break;
		case 51:
			x = x + 10;
			break;
		case 52:
			x = x << 2;
			break;
		case 53:
			x = x >> 2;
			break;
		case 54:
			x = (3 * x)**2 + 10;
			break;
		case 55:
			x = x**2 + 10;
			break;
		default:
			x = x + 10;
			break;
	}

	return result;
}

The instructions store x in %eax and n in %edx. Subtracting 50 from %edx if %edx < 50 will underflow and return a number greater than 50. If %edx > 55, it will also return a number greater than 50. Both these cases will lead to instruction 8048448, which adds 10 to x and returns. This makes the default case.
If n = [50, 51, 52, 53, 54, 55], subtracting 50 will execute “jmp *0x80485d0(, %edx,4)”, which goes to the 0th, 1st, …, or 5th address stored in 0x80485d0. 
If n = 50, it goes to the 0th instruction, 0x08048438, which shifts x left by 2. Since the arithmetic and logical shift lefts are the same, using the “<<“ operator in C will work as expected. Then it goes to the end of the function (i.e. breaks out of the switch statement and returns).
If n = 51, it goes to the 1st instruction, 0x08048448, which adds 10 to x and returns.
If n = 52, it goes to the 2nd instruction, 0x08048438, which is the same as the 0th instruction (ie. the n=50 case).
If n = 53, it goes to the 3rd instruction, 0x0804843d, which does 2 arithmetic shift rights on x. Since x is defined as an int in C, it is signed and the “>>” operation will do the arithmetic shift as desired.
If n = 54, it goes to the 4th instruction, 0x08048442, which stores value in %eax + value in %eax * 2 in %eax, where the value in %eax is x. So it effectively does 3*x. Then it multiplies value in %eax by itself, then adds 10 to it and returns. So the result is (3*x)^2 + 10.
If n = 55, it goes into the 5th instruction, 0x08048445, which only multiplies the value in %eax by itself and adds 10 to it before returning, where the value in %eax is x. So the result is x^2 + 10.


