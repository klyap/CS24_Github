There are 2 LD and 1 ST instruction per iteration. For an array of 100,
there will be 100 iterations. 
Without the arbiter, the LD and ST instructions will take
        (2 + 1) * 100 = 300 clock cycles.
With the arbiter, we need to introduce an extra factor of >=2,
resulting in >=600 clock cycles.
This means that the arbiter adds >=300 clock cycles to the
non-arbiter version's computation time for an array length of 100.


Assume that 2 CPU's are accessing the same instruction memory but
for different input arrays, and that's why the LD and ST 
instructions are needed.

If both CPU's are executing the same program, the worst case is that 
one CPU never releases the bus to the other CPU until it is done with 
the whole program, which defeats the purpose of having 2 CPU's. This 
increases run time by a factor of 2. With 100 elements in the arrays, 
this gives 2 * (>=300 clock cycles) which is >= 600 clock cycles.


