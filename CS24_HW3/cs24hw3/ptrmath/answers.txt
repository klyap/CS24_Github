Answers for the "Arrays, Pointer Arithmetic, and Structs" section of CS24 HW3:

1.
char *p = malloc(16);
bzero(p, 16); /* Sets all bytes to 0. */
Since p is a char pointer, incrementing it will go forward 1 byte.
Malloc'ed memory is now: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

*((int *) (p + 3)) = 0xDEADBEEF;
Points to the int pointer: = p + 3 = 0x0 + 3*(size of char) = 0x3
Assigns value at 0x3 to 0xDEADBEEF = EF BE AD DE 
Malloc'ed memory is now: 00 00 00 EF BE AD DE 00 00 00 00 00 00 00 00 00

*(((int *) p) + 3) = 0xCAFEBABE;
Casts p as an int pointer, increments it by 3*(size of int) = 3*(4) = 12.
Assigns value from 12th byte onwards to 0xCAFEBABE = BE BA FE CA
Malloc'ed memory is now: 00 00 00 EF BE AD DE 00 00 00 00 00 BE BA FE CA

2. 

				Offset (bytes)	Size (bytes)
int id					0		4 
char code[5]			4		5
struct entry* next		12		4

Total size of struct: 16
Unused bytes: 3 (from char code[5])

3.
offset = size of arr[4].code[3] 
= 4 * (size of "entry" struct) + space of "id" + space of code[0] to code[2]
= (4 * 16) + (4) + (3)
= 71 bytes

