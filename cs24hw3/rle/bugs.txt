1. In find_space_loop: Increment %esi by 2.
	Since we want to sum the lengths and those are stored 
	in odd memory locations, the counter needs to increment
	by 2 instead of 1. Otherwise, it will attempt to sum up
	the value to be repeated as well.

2. In write_loop: Increment %edi by 1
	It's overwriting the same value each time.
	To write to next memory location in output, you need to
	increment %edi by 1.

3. In find_space_done: Need to do callee save registers
	There is an issue because certain registers aren't saved
	and are tampered with during function calls.
	We need to deal with callee save registers when calling
	another function such as malloc.
	First we need to push the registers before the call
	and then pop when we return.
	Callee save registers are %eax, %ecx, %edx (Lecture 6).
	Don't need %edx later on in code, so don't need to store.
	%eax is only used to store output at the very end so there is no value here
	to store at this time either.
	For this code, we only need to push %ecx onto stack.

4. In find_space_loop: %bl overflows when the stored sum gets large 
   (value stored in %ebx will intefere with that in %bl)
	Instead, clear out the register %edx, which contains a similar 
	register to %bl, called %dl, in the last 8 bits of %edx.
	Store each value in %dl as we were doing with %bl. %edx is now filled
	with 0's for the first 28 bits and then has the value of %dl in the
	last 8 bits. We can then add %edx into %ebx, where the 
	final sum is stored. We can't directly add %dl into %ebx
	since they are of different sizes.

